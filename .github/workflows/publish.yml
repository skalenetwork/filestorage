name: Publish
on:
  pull_request:
    types: [closed]
    branches:
      - stable
      - develop
      - beta


jobs:
  npm:
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '14.x'
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          npm i
          pip install -e ./predeployed
      - name: Compile with truffle
        run: |
          npm run compile
      - name: Set version and branch
        run: |
          export BRANCH=${GITHUB_REF##*/}
          export VERSION=$(bash ./scripts/calculate_version.sh)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "Version $VERSION"
          test $BRANCH = "stable" && export STABLE=true || export NOT_STABLE=true
          echo "STABLE=$STABLE" >> $GITHUB_ENV
          echo "NOT_STABLE=$NOT_STABLE" >> $GITHUB_ENV
      - name: Generate artifacts.json NPM
        run: |
          python predeployed/utils/generate_artifacts.py
          cp predeployed/utils/data/artifacts.json .
      - name: Publish on npm
        if: ${{ env.NOT_STABLE }}
        run: |
          npm version --no-git-tag-version ${{ env.VERSION }}
          npm publish --access public --tag ${{ env.BRANCH }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish on npm (stable)
        if: ${{ env.STABLE }}
        run: |
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  predeployed:
    runs-on: ubuntu-latest
    env:
      PIP_USERNAME: ${{ secrets.PIP_USERNAME }}
      PIP_PASSWORD: ${{ secrets.PIP_PASSWORD }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '14.x'
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          npm i
          cd predeployed/
          pip install -e .[dev]
          pip install wheel
      - name: Compile with truffle
        run: |
          npm run compile
      - name: Calculate versions
        run: |
          export BRANCH=${GITHUB_REF##*/}
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "Branch $BRANCH"
      - name: Build
        working-directory: ./predeployed
        run: |
          export VERSION=$(bash ./scripts/calculate_version.sh)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Pkg version $VERSION"
          bash ./scripts/build.sh
      - name: Publish to pip
        working-directory: ./predeployed
        run: |
          bash ./scripts/publish.sh

  github:
    needs: [npm, predeployed]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '14.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Install dependencies
        run: |
          npm i
      - name: Calculate versions
        run: |
          export BRANCH=${GITHUB_REF##*/}
          echo "Branch $BRANCH"
          export GITHUB_VERSION=$(bash ./scripts/calculate_version.sh)
          echo "GITHUB_VERSION=$GITHUB_VERSION" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "Release version $GITHUB_VERSION"
          ( test $BRANCH = "stable" || test $BRANCH = "master" && export PRERELEASE=false ) || export PRERELEASE=true
          echo "PRERELEASE=$PRERELEASE" >> $GITHUB_ENV
      - name: Compile with truffle
        env:
          VERSION: ${{ env.GITHUB_VERSION }}
        run: |
          npm run compile
          cp build/contracts/FileStorage.json filestorage-$VERSION-abi.json
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GITHUB_VERSION }}
          release_name: ${{ env.GITHUB_VERSION }}
          draft: false
          prerelease: ${{ env.PRERELEASE }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./filestorage-${{ env.GITHUB_VERSION }}-abi.json
          asset_name: filestorage-${{ env.GITHUB_VERSION }}-abi.json
          asset_content_type: application/json